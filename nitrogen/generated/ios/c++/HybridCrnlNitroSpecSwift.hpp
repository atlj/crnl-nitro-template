///
/// HybridCrnlNitroSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridCrnlNitroSpec.hpp"

// Forward declaration of `HybridCrnlNitroSpecCxx` to properly resolve imports.
namespace CrnlNitro { class HybridCrnlNitroSpecCxx; }





#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "CrnlNitro-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::crnlnitro {

  /**
   * The C++ part of HybridCrnlNitroSpecCxx.swift.
   *
   * HybridCrnlNitroSpecSwift (C++) accesses HybridCrnlNitroSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridCrnlNitroSpecCxx can directly inherit from the C++ class HybridCrnlNitroSpec
   * to simplify the whole structure and memory management.
   */
  class HybridCrnlNitroSpecSwift: public virtual HybridCrnlNitroSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridCrnlNitroSpecSwift(const CrnlNitro::HybridCrnlNitroSpecCxx& swiftPart):
      HybridObject(HybridCrnlNitroSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline CrnlNitro::HybridCrnlNitroSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline double multiply(double a, double b) override {
      auto __result = _swiftPart.multiply(std::forward<decltype(a)>(a), std::forward<decltype(b)>(b));
      return __result;
    }

  private:
    CrnlNitro::HybridCrnlNitroSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::crnlnitro
